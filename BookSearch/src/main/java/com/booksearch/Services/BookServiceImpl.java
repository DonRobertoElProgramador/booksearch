package com.booksearch.Services;

import java.util.HashSet;

import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.booksearch.Model.*;

import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class BookServiceImpl implements BookService{

	private Set<Book> books = new HashSet<Book>();
	ObjectMapper objectMapper = new ObjectMapper();
	
	/*In the future it had to be autogenerated*/
	long id = 1;
	
	@Override
	public void addBook(Book book) {
		book.setId(id);
		books.add(book);
		id++;
	}

	@Override
	public Book readBook(Long bookId) {
		
		return getMatchingBook(bookId);		
	}

	@Override
	public void updateBook(Long bookId, Book bookView) {
	Book matchingBook = getMatchingBook(bookId);
		if(matchingBook!=null) {
			matchingBook.setAuthor(bookView.getAuthor());
			matchingBook.setName(bookView.getName());
			matchingBook.setPrice(bookView.getPrice());
		}
	}	
	
	@Override
	public void deleteBook(Long bookId) {
	Book matchingBook = getMatchingBook(bookId);
		if(matchingBook!=null) {
		books.remove(matchingBook);
		}
	}

	@Override
	public Set<Book> getAllBooks() {
		return books;
	}

	@Override
	public Set<Book> getBooksBetweenPrices(Integer minPrice, Integer maxPrice) {
		
		int mip = minPrice==null?0 : minPrice.intValue();
		int maxp = maxPrice==null?Integer.MAX_VALUE : maxPrice.intValue();
		
		return books.stream()
		.filter(b -> b.getPrice() <= maxp && b.getPrice()>= mip).collect(Collectors.toSet());
    }

	@Override
	public Set<Book> getBooksByAuthor(String author) {
		return books.stream().filter(b -> b.getAuthor().equals(author)).collect(Collectors.toSet());
	}

	/*UTILS*/
	private Book getMatchingBook(long bookId) {
		
		Optional<Book> matchingBook = books.stream().filter(b -> b.getId()==bookId).findFirst();
		if(!matchingBook.isEmpty()) {
			return matchingBook.get();
		}		
		return null;
	}
}
